/**
 * Transaction Receipt Type
 *
 * Represents the receipt of a transaction execution
 * Returned by eth_getTransactionReceipt
 *
 * Reference: https://github.com/ethereum/execution-apis/blob/main/src/schemas/receipt.yaml
 */

import type {
	Address,
	Byte,
	Bytes256,
	Hash32,
	Uint,
	Uint256,
} from "./base-types";
import type { Log } from "./log";

/**
 * Transaction receipt
 *
 * Contains the results of transaction execution including gas used,
 * logs emitted, and contract address for contract creations.
 */
export interface ReceiptInfo {
	/** Transaction type (0x0 for legacy, 0x1 for EIP-2930, 0x2 for EIP-1559, 0x3 for EIP-4844, 0x4 for EIP-7702) */
	type: Byte;

	/** Hash of the transaction */
	transactionHash: Hash32;

	/** Index of the transaction in the block */
	transactionIndex: Uint;

	/** Hash of the block containing this transaction */
	blockHash: Hash32;

	/** Number of the block containing this transaction */
	blockNumber: Uint;

	/** Address of the sender */
	from: Address;

	/** Address of the receiver, null for contract creation */
	to: Address | null;

	/** Total gas used by all transactions in the block up to and including this one */
	cumulativeGasUsed: Uint;

	/** Gas used by this transaction */
	gasUsed: Uint;

	/** Gas used by blobs in this transaction (EIP-4844) */
	blobGasUsed?: Uint;

	/** Contract address created, if the transaction was a contract creation, otherwise null */
	contractAddress: Address | null;

	/** Array of log objects generated by this transaction */
	logs: readonly Log[];

	/** Bloom filter for light clients to quickly retrieve related logs */
	logsBloom: Bytes256;

	/** Post-transaction state root (pre-Byzantium only) */
	root?: Hash32;

	/** Status: 1 for success, 0 for failure (post-Byzantium) */
	status?: Uint;

	/** Effective gas price (base fee + priority fee) */
	effectiveGasPrice: Uint;

	/** Blob gas price (EIP-4844) */
	blobGasPrice?: Uint;
}

/**
 * Type guard to check if receipt has status (post-Byzantium)
 */
export function hasStatus(
	receipt: ReceiptInfo,
): receipt is ReceiptInfo & { status: Uint } {
	return receipt.status !== undefined;
}

/**
 * Type guard to check if receipt has root (pre-Byzantium)
 */
export function hasRoot(
	receipt: ReceiptInfo,
): receipt is ReceiptInfo & { root: Hash32 } {
	return receipt.root !== undefined;
}

/**
 * Check if transaction was successful
 */
export function isSuccessful(receipt: ReceiptInfo): boolean {
	// Post-Byzantium: check status
	if (hasStatus(receipt)) {
		return receipt.status === "0x1";
	}
	// Pre-Byzantium: if there's a root, we can't determine success from receipt alone
	return true;
}

/**
 * Type guard to check if receipt is for EIP-4844 transaction
 */
export function isEip4844Receipt(
	receipt: ReceiptInfo,
): receipt is ReceiptInfo & { blobGasUsed: Uint; blobGasPrice: Uint } {
	return receipt.blobGasUsed !== undefined && receipt.blobGasPrice !== undefined;
}
